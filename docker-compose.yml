# 
# Development (localhost) docker compose file
# 
version: "3.0"
services:
  moilerplate:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: moilerplate_app
    image: moilerplate-app-dev
    restart: always
    environment:
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8082
      - LOG_PATH=logs/log.txt
      - DEFAULT_ROWS_PER_PAGE=25
      # DB
      - DB_HOST=moilerplate_pg
      - DB_PORT=5432
      - DB_NAME=moilerplate
      - DB_USER=postgres
      - DB_PASSWORD=verystrongpassword
      - DB_MAX_POOL_SIZE=5
      - DB_MAX_OPEN_CONN=5
      - DB_MAX_CONN_LIFETIME=1m
      # Rate Limitting
      - RATER_LIMIT=2
      - BURST_LIMIT=2
      - RATER_EVALUATION_INTERVAL=1m
      - RATER_DELETION_TIME=3m
      # Doorkeeper
      - DOORKEEPER_ISSUER=MOILERPLATE
      - DOORKEEPER_HASH_METHOD=SHA384
      - DOORKEEPER_SIGNING_METHOD=HMAC
      - DOORKEEPER_SIGN_SIZE=256
      # Secret key only for HMAC
      - DOORKEEPER_SECRET_KEY=verystrongsecretkey
      # Keep empty if you want to use HMAC
      - DOORKEEPER_CERT_PATH=
      # Admin key for accessing documentation resources or more
      - DOORKEEPER_ADMIN_KEY=verystrongpassword
      - DOORKEEPER_ACCESS_TOKEN_DURATION=1h
      - DOORKEEPER_REFRESH_TOKEN_DURATION=24h
      # Opentelemetry configurations
      - OTEL_TRACE_ENDPOINT=otel_collector:4318
      - OTEL_METRIC_ENDPOINT=otel_collector:4318
      - OTEL_SERVICE_NAME=moilerplate-app
      - OTEL_SERVICE_VERSION=v0.1.0
      - OTEL_SERVICE_INSTANCE_ID=moilerplate-app
    ports:
      - 8082:8082
    networks:
      - moilerplate-network
    volumes:
      - ./:/app # Include the content of root dir for hot reload
    depends_on:
      - pg
      - otel_collector

  pg:
    image: postgres:latest
    container_name: moilerplate_pg
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=verystrongpassword
      - POSTGRES_DB=moilerplate
    restart: unless-stopped
    ports:
      - 5432:5432
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - moilerplate-network

  # OpenTelemetry Collector
  otel_collector:
    container_name: moilerplate_otel_collector
    image: otel/opentelemetry-collector-contrib:0.70.0
    command: --config=/etc/otel-collector-config.yaml
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4318:4318" # OTLP over HTTP receiver
      - "9464:9464" # Prometheus exporter
    networks:
      - moilerplate-network
    depends_on:
      - jaeger
      - prometheus

  # Jaeger
  jaeger:
    container_name: moilerplate_jaeger
    image: jaegertracing/all-in-one:1.41.0
    environment:
      - SPAN_STORAGE_TYPE=cassandra
      - CASSANDRA_SERVERS=cassandra
      - CASSANDRA_KEYSPACE=jaeger_v1_dc1
    ports:
      - "14250:14250" # Collector gRPC
      - "16686:16686" # Web HTTP
    networks:
      - moilerplate-network
    depends_on:
      cassandra:
        condition: service_healthy
      cassandra-schema:
        condition: service_completed_successfully

  cassandra-schema:
    image: jaegertracing/jaeger-cassandra-schema:1.43
    container_name: moilerplate_cassandra_schema
    environment:
      - CASSANDRA_PROTOCOL_VERSION=4
      - CASSANDRA_VERSION=4
      - CQLSH_HOST=cassandra
      - MODE=test
    networks:
      - moilerplate-network
    depends_on:
      cassandra:
        condition: service_healthy

  cassandra:
    restart: always
    image: cassandra:4.0
    container_name: moilerplate_cassandra
    ports:
      - 9042:9042
    volumes:
      - cassandra-data:/var/lib/cassandra
    networks:
      - moilerplate-network
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 1s
      retries: 120
      timeout: 1s


  # Prometheus
  prometheus:
    container_name: moilerplate_prometheus
    image: prom/prometheus:v2.42.0
    command:
      - --config.file=/etc/prometheus.yaml
    volumes:
      - ./prometheus.yaml:/etc/prometheus.yaml:ro
      - prometheus-data:/var/lib/prometheus
    ports:
      - "9090:9090"
    networks:
      - moilerplate-network

  # Grafana
  grafana:
    container_name: moilerplate_grafana
    image: grafana/grafana-oss
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - moilerplate-network
    depends_on:
      - prometheus

volumes:
  pg-data:
  grafana-data:
  prometheus-data:
  cassandra-data:
networks:
  moilerplate-network:
